local file = require 'atelier.file'

--- @class AtelierExport
--- @field export_colorscheme fun(colorscheme_index: number): nil
local M = {}

--- @param colorscheme_index number
--- @return nil
M.export_colorscheme = function(colorscheme_index)
  local colorscheme_list = file.read()
  if
    not colorscheme_list
    or colorscheme_index < 1
    or colorscheme_index > #colorscheme_list
  then
    vim.notify('Invalid colorscheme index', vim.log.levels.ERROR)
    return
  end

  local colorscheme = colorscheme_list[colorscheme_index]
  if colorscheme.name == '<EMPTY>' then
    vim.notify('Cannot export an empty colorscheme', vim.log.levels.ERROR)
    return
  end

  if not colorscheme.palette then
    vim.notify('Colorscheme has no palette to export', vim.log.levels.ERROR)
    return
  end

  -- prompt user for export location
  local export_path = vim.fn.input {
    prompt = 'Export location: ',
    default = vim.fn.expand '~/',
    completion = 'dir',
  }

  if export_path == '' then
    vim.notify('Export cancelled', vim.log.levels.INFO)
    return
  end

  -- ensure path ends with /
  if export_path:sub(-1) ~= '/' then
    export_path = export_path .. '/'
  end

  -- create colorscheme plugin name (normalize for filesystem)
  local plugin_name = colorscheme.name:gsub(' ', '-'):lower() .. '.nvim'
  local plugin_path = export_path .. plugin_name

  -- create directory structure
  local dirs = {
    plugin_path,
    plugin_path .. '/lua',
    plugin_path .. '/lua/' .. plugin_name:gsub('%.nvim$', ''),
    plugin_path .. '/colors',
  }

  for _, dir in ipairs(dirs) do
    local success = vim.fn.mkdir(dir, 'p')
    if success == 0 then
      vim.notify('Failed to create directory: ' .. dir, vim.log.levels.ERROR)
      return
    end
  end

  -- create plugin files
  local files = {
    {
      path = plugin_path
        .. '/lua/'
        .. plugin_name:gsub('%.nvim$', '')
        .. '/init.lua',
      content = M.generate_init_file(colorscheme),
    },
    {
      path = plugin_path
        .. '/lua/'
        .. plugin_name:gsub('%.nvim$', '')
        .. '/palette.lua',
      content = M.generate_palette_file(colorscheme),
    },
    {
      path = plugin_path .. '/colors/' .. colorscheme.name
        :gsub(' ', '-')
        :lower() .. '.lua',
      content = M.generate_colors_file(colorscheme),
    },
    {
      path = plugin_path .. '/README.md',
      content = M.generate_readme(colorscheme),
    },
  }

  for _, file_info in ipairs(files) do
    local file_handle = io.open(file_info.path, 'w')
    if file_handle then
      file_handle:write(file_info.content)
      file_handle:close()
    else
      vim.notify(
        'Failed to write file: ' .. file_info.path,
        vim.log.levels.ERROR
      )
    end
  end

  vim.notify('Colorscheme exported to: ' .. plugin_path, vim.log.levels.INFO)
end

--- @param colorscheme Colorscheme
--- @return string content
M.generate_init_file = function(colorscheme)
  return string.format(
    [[
-- %s: A Neovim colorscheme
-- Generated by [atelier.nvim](https://github.com/alistairjoelquinn/atelier.nvim)

local M = {}

M.setup = function()
  local palette = require '%s.palette'
  
  -- Create highlight groups based on the palette
  local highlight_groups = M.create_highlight_groups(palette)
  
  -- Apply highlight groups
  for group, settings in pairs(highlight_groups) do
    vim.api.nvim_set_hl(0, group, settings)
  end
end

-- Create highlight groups based on colors
M.create_highlight_groups = function(colors)
  return {
    -- Core editor elements
    Normal = {
      fg = colors.keywords_and_delimiters,
      bg = colors.main_background,
    },
    NormalFloat = {
      fg = colors.keywords_and_delimiters,
      bg = colors.main_background,
    },
    Cursor = {
      fg = colors.main_background,
      bg = colors.keywords_and_delimiters,
    },
    CursorLine = { bg = colors.current_line_highlight },
    LineNr = { fg = colors.borders_and_line_numbers },
    CursorLineNr = { fg = colors.functions_and_warnings },
    SignColumn = { bg = colors.main_background },

    -- Window elements
    WinSeparator = { fg = colors.borders_and_line_numbers },
    FloatBorder = { fg = colors.borders_and_line_numbers },

    -- Popup menus
    Pmenu = {
      fg = colors.keywords_and_delimiters,
      bg = colors.current_line_highlight,
    },
    PmenuSel = {
      fg = colors.emphasized_text,
      bg = colors.borders_and_line_numbers,
    },
    PmenuSbar = { bg = colors.current_line_highlight },
    PmenuThumb = { bg = colors.borders_and_line_numbers },

    -- Search highlighting
    Search = {
      fg = colors.emphasized_text,
      bg = colors.search_highlight_background,
    },
    IncSearch = {
      fg = colors.emphasized_text,
      bg = colors.search_highlight_background,
    },
    CurSearch = {
      fg = colors.emphasized_text,
      bg = colors.search_highlight_background,
    },

    -- Visual mode highlighting
    Visual = {
      bg = colors.visual_highlight_background,
    },
    VisualNOS = {
      bg = colors.visual_highlight_background,
    },

    -- Folds
    Folded = { fg = colors.comments, bg = colors.current_line_highlight },
    FoldColumn = { fg = colors.borders_and_line_numbers },

    -- Messages and notifications
    ErrorMsg = { fg = colors.errors_scope_and_special_characters },
    WarningMsg = { fg = colors.functions_and_warnings },
    MoreMsg = { fg = colors.strings_and_success },
    Question = { fg = colors.variables_and_identifiers },

    -- Basic syntax elements
    Comment = { fg = colors.comments, italic = true },
    String = { fg = colors.strings_and_success },
    Number = { fg = colors.numbers_and_math_symbols },
    Function = { fg = colors.functions_and_warnings, italic = true },
    Keyword = { fg = colors.keywords_and_delimiters },
    Constant = { fg = colors.errors_scope_and_special_characters },
    Type = { fg = colors.types_and_classes },
    Statement = { fg = colors.keywords_and_delimiters },
    Special = { fg = colors.errors_scope_and_special_characters },
    Identifier = { fg = colors.variables_and_identifiers },
    PreProc = { fg = colors.keywords_and_delimiters },
    Delimiter = { fg = colors.keywords_and_delimiters },
    Operator = { fg = colors.numbers_and_math_symbols },
    Variable = { fg = colors.variables_and_identifiers },

    -- TreeSitter Syntax Groups:
    -- Functions
    ['@function'] = { fg = colors.functions_and_warnings, italic = true },
    ['@function.call'] = { fg = colors.functions_and_warnings, italic = true },
    ['@function.builtin'] = {
      fg = colors.functions_and_warnings,
      italic = true,
    },
    ['@function.import'] = { fg = colors.functions_and_warnings, italic = true },
    ['@function.imported'] = {
      fg = colors.functions_and_warnings,
      italic = true,
    },
    ['@function.macro'] = { fg = colors.functions_and_warnings, italic = true },
    ['@method'] = { fg = colors.functions_and_warnings, italic = true },
    ['@method.call'] = { fg = colors.functions_and_warnings, italic = true },

    -- Variables
    ['@variable'] = { fg = colors.variables_and_identifiers },
    ['@variable.member'] = { fg = colors.variables_and_identifiers },
    ['@variable.builtin'] = { fg = colors.variables_and_identifiers },
    ['@variable.parameter'] = { fg = colors.variables_and_identifiers },
    ['@variable.other'] = { fg = colors.variables_and_identifiers },
    ['@variable.other.constant'] = { fg = colors.variables_and_identifiers },
    ['@constant'] = { fg = colors.variables_and_identifiers },
    ['@field'] = { fg = colors.variables_and_identifiers },
    ['@property'] = { fg = colors.variables_and_identifiers },
    ['@parameter'] = { fg = colors.variables_and_identifiers },

    -- Types
    ['@type'] = { fg = colors.types_and_classes },
    ['@type.builtin'] = { fg = colors.types_and_classes },

    -- Modules
    ['@module'] = { fg = colors.functions_and_warnings, italic = true },
    ['@module.name'] = { fg = colors.functions_and_warnings, italic = true },
    ['@module.import'] = { fg = colors.functions_and_warnings, italic = true },
    ['@definition.import'] = {
      fg = colors.functions_and_warnings,
      italic = true,
    },

    -- Other syntax elements
    ['@keyword'] = { fg = colors.keywords_and_delimiters },
    ['@string'] = { fg = colors.strings_and_success },
    ['@constructor'] = { fg = colors.keywords_and_delimiters },
    ['@tag'] = { fg = colors.keywords_and_delimiters },
    ['@tag.attribute'] = { fg = colors.functions_and_warnings },
    ['@tag.delimiter'] = { fg = colors.keywords_and_delimiters },
    ['@punctuation.delimiter'] = { fg = colors.keywords_and_delimiters },
    ['@punctuation.bracket'] = { fg = colors.keywords_and_delimiters },
    ['@punctuation.special'] = {
      fg = colors.errors_scope_and_special_characters,
    },
    ['@comment'] = { fg = colors.comments, italic = true },
    ['@operator'] = { fg = colors.numbers_and_math_symbols },
    ['@definition'] = { fg = colors.functions_and_warnings, italic = true },

    -- LSP Semantic Tokens
    ['@lsp.type.class'] = { fg = colors.keywords_and_delimiters },
    ['@lsp.type.decorator'] = {
      fg = colors.errors_scope_and_special_characters,
    },
    ['@lsp.type.enum'] = { fg = colors.keywords_and_delimiters },
    ['@lsp.type.function'] = {
      fg = colors.functions_and_warnings,
      italic = true,
    },
    ['@lsp.type.interface'] = { fg = colors.keywords_and_delimiters },
    ['@lsp.type.namespace'] = { fg = colors.keywords_and_delimiters },
    ['@lsp.type.parameter'] = { fg = colors.numbers_and_math_symbols },
    ['@lsp.type.property'] = { fg = colors.variables_and_identifiers },
    ['@lsp.type.variable'] = { fg = colors.variables_and_identifiers },
    ['@lsp.mod.callable'] = {
      fg = colors.functions_and_warnings,
      italic = true,
    },

    -- Diagnostics
    DiagnosticError = { fg = colors.errors_scope_and_special_characters },
    DiagnosticWarn = { fg = colors.functions_and_warnings },
    DiagnosticInfo = { fg = colors.variables_and_identifiers },
    DiagnosticHint = { fg = colors.strings_and_success },

    -- NvimTree
    NvimTreeFolderName = { fg = colors.numbers_and_math_symbols },
    NvimTreeOpenedFolderName = { fg = colors.numbers_and_math_symbols },
    NvimTreeEmptyFolderName = { fg = colors.numbers_and_math_symbols },
    NvimTreeFolderIcon = { fg = colors.numbers_and_math_symbols },
  }
end

return M
]],
    colorscheme.name,
    colorscheme.name:gsub(' ', '-'):lower()
  )
end

--- @param colorscheme Colorscheme
--- @return string content
M.generate_palette_file = function(colorscheme)
  local palette_entries = {}
  for key, value in pairs(colorscheme.palette) do
    table.insert(palette_entries, string.format("  %s = '%s',", key, value))
  end

  -- sort palette entries for consistent output
  table.sort(palette_entries)

  local palette_content = table.concat(palette_entries, '\n')

  return string.format(
    [[
-- %s: Color Palette
-- Generated by [atelier.nvim](https://github.com/alistairjoelquinn/atelier.nvim)

return {
%s
}
]],
    colorscheme.name,
    palette_content
  )
end

--- @param colorscheme Colorscheme
--- @return string content
M.generate_colors_file = function(colorscheme)
  local colorscheme_name_normalized = colorscheme.name:gsub(' ', '_'):lower()
  local plugin_name = colorscheme.name:gsub(' ', '-'):lower()

  return string.format(
    [[
-- %s: A Neovim colorscheme
-- Generated by [atelier.nvim](https://github.com/alistairjoelquinn/atelier.nvim)

vim.api.nvim_command('hi clear')

if vim.fn.exists('syntax_on') then
  vim.api.nvim_command('syntax reset')
end

vim.o.termguicolors = true
vim.g.colors_name = '%s'

require('%s').setup()
]],
    colorscheme.name,
    colorscheme_name_normalized,
    plugin_name
  )
end

--- Generate README.md file
--- @param colorscheme Colorscheme the colorscheme to generate for
--- @return string content for README.md
M.generate_readme = function(colorscheme)
  local colorscheme_name_normalized = colorscheme.name:gsub(' ', '-'):lower()

  return string.format(
    [[
# %s.nvim

A Neovim colorscheme generated by [atelier.nvim](https://github.com/yourusername/atelier.nvim).

## Installation

Using [lazy.nvim](https://github.com/folke/lazy.nvim):

```lua
{
  '%s/%s.nvim',
  lazy = false,
  priority = 1000,
}
```

## Screenshots

[Add screenshots here]
]],
    colorscheme.name,
    'yourusername',
    colorscheme_name_normalized,
    'yourusername',
    colorscheme_name_normalized,
    colorscheme.name:gsub(' ', '_'):lower()
  )
end

return M
